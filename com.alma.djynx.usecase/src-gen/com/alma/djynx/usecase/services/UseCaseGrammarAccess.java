/*
 * generated by Xtext
 */
package com.alma.djynx.usecase.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class UseCaseGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class UseCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UseCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSystemsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSystemsSubsystemParserRuleCall_0_0 = (RuleCall)cSystemsAssignment_0.eContents().get(0);
		private final Assignment cActorsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cActorsActorParserRuleCall_1_0 = (RuleCall)cActorsAssignment_1.eContents().get(0);
		
		//UseCase:
		//	systems+=Subsystem* actors+=Actor*;
		@Override public ParserRule getRule() { return rule; }

		//systems+=Subsystem* actors+=Actor*
		public Group getGroup() { return cGroup; }

		//systems+=Subsystem*
		public Assignment getSystemsAssignment_0() { return cSystemsAssignment_0; }

		//Subsystem
		public RuleCall getSystemsSubsystemParserRuleCall_0_0() { return cSystemsSubsystemParserRuleCall_0_0; }

		//actors+=Actor*
		public Assignment getActorsAssignment_1() { return cActorsAssignment_1; }

		//Actor
		public RuleCall getActorsActorParserRuleCall_1_0() { return cActorsActorParserRuleCall_1_0; }
	}

	public class SubsystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Subsystem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSubsystemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cCasesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCasesCaseParserRuleCall_2_0 = (RuleCall)cCasesAssignment_2.eContents().get(0);
		
		//Subsystem:
		//	"Subsystem: " name=ID cases+=Case*;
		@Override public ParserRule getRule() { return rule; }

		//"Subsystem: " name=ID cases+=Case*
		public Group getGroup() { return cGroup; }

		//"Subsystem: "
		public Keyword getSubsystemKeyword_0() { return cSubsystemKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//cases+=Case*
		public Assignment getCasesAssignment_2() { return cCasesAssignment_2; }

		//Case
		public RuleCall getCasesCaseParserRuleCall_2_0() { return cCasesCaseParserRuleCall_2_0; }
	}

	public class CaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Case");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cExtensionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExtensionsExtensionPointParserRuleCall_2_0 = (RuleCall)cExtensionsAssignment_2.eContents().get(0);
		private final Assignment cIncludesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIncludesIncludesParserRuleCall_3_0 = (RuleCall)cIncludesAssignment_3.eContents().get(0);
		private final Assignment cExtendsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExtendsExtendsParserRuleCall_4_0 = (RuleCall)cExtendsAssignment_4.eContents().get(0);
		
		//Case:
		//	"Case: " name=ID extensions+=ExtensionPoint* includes+=Includes* extends+=Extends*;
		@Override public ParserRule getRule() { return rule; }

		//"Case: " name=ID extensions+=ExtensionPoint* includes+=Includes* extends+=Extends*
		public Group getGroup() { return cGroup; }

		//"Case: "
		public Keyword getCaseKeyword_0() { return cCaseKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//extensions+=ExtensionPoint*
		public Assignment getExtensionsAssignment_2() { return cExtensionsAssignment_2; }

		//ExtensionPoint
		public RuleCall getExtensionsExtensionPointParserRuleCall_2_0() { return cExtensionsExtensionPointParserRuleCall_2_0; }

		//includes+=Includes*
		public Assignment getIncludesAssignment_3() { return cIncludesAssignment_3; }

		//Includes
		public RuleCall getIncludesIncludesParserRuleCall_3_0() { return cIncludesIncludesParserRuleCall_3_0; }

		//extends+=Extends*
		public Assignment getExtendsAssignment_4() { return cExtendsAssignment_4; }

		//Extends
		public RuleCall getExtendsExtendsParserRuleCall_4_0() { return cExtendsExtendsParserRuleCall_4_0; }
	}

	public class ExtensionPointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExtensionPoint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExtensionPointKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ExtensionPoint:
		//	"ExtensionPoint: " name=ID;
		@Override public ParserRule getRule() { return rule; }

		//"ExtensionPoint: " name=ID
		public Group getGroup() { return cGroup; }

		//"ExtensionPoint: "
		public Keyword getExtensionPointKeyword_0() { return cExtensionPointKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class IncludesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Includes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIncludesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRulesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRulesIDTerminalRuleCall_3_0 = (RuleCall)cRulesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Includes:
		//	"Includes: " name=ID "{" rules+=ID* "}";
		@Override public ParserRule getRule() { return rule; }

		//"Includes: " name=ID "{" rules+=ID* "}"
		public Group getGroup() { return cGroup; }

		//"Includes: "
		public Keyword getIncludesKeyword_0() { return cIncludesKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//rules+=ID*
		public Assignment getRulesAssignment_3() { return cRulesAssignment_3; }

		//ID
		public RuleCall getRulesIDTerminalRuleCall_3_0() { return cRulesIDTerminalRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ExtendsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Extends");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExtendsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRulesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRulesIDTerminalRuleCall_3_0 = (RuleCall)cRulesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Extends:
		//	"Extends: " name=ID "{" rules+=ID* "}";
		@Override public ParserRule getRule() { return rule; }

		//"Extends: " name=ID "{" rules+=ID* "}"
		public Group getGroup() { return cGroup; }

		//"Extends: "
		public Keyword getExtendsKeyword_0() { return cExtendsKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//rules+=ID*
		public Assignment getRulesAssignment_3() { return cRulesAssignment_3; }

		//ID
		public RuleCall getRulesIDTerminalRuleCall_3_0() { return cRulesIDTerminalRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ActorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Actor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cInheritancesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInheritancesInheritanceParserRuleCall_2_0 = (RuleCall)cInheritancesAssignment_2.eContents().get(0);
		private final Assignment cUsesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUsesUsesParserRuleCall_3_0 = (RuleCall)cUsesAssignment_3.eContents().get(0);
		
		//Actor:
		//	"Actor: " name=ID inheritances+=Inheritance* uses+=Uses*;
		@Override public ParserRule getRule() { return rule; }

		//"Actor: " name=ID inheritances+=Inheritance* uses+=Uses*
		public Group getGroup() { return cGroup; }

		//"Actor: "
		public Keyword getActorKeyword_0() { return cActorKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//inheritances+=Inheritance*
		public Assignment getInheritancesAssignment_2() { return cInheritancesAssignment_2; }

		//Inheritance
		public RuleCall getInheritancesInheritanceParserRuleCall_2_0() { return cInheritancesInheritanceParserRuleCall_2_0; }

		//uses+=Uses*
		public Assignment getUsesAssignment_3() { return cUsesAssignment_3; }

		//Uses
		public RuleCall getUsesUsesParserRuleCall_3_0() { return cUsesUsesParserRuleCall_3_0; }
	}

	public class InheritanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Inheritance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExtendsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Inheritance:
		//	"Extends: " name=ID;
		@Override public ParserRule getRule() { return rule; }

		//"Extends: " name=ID
		public Group getGroup() { return cGroup; }

		//"Extends: "
		public Keyword getExtendsKeyword_0() { return cExtendsKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class UsesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Uses");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUsesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cMultiplicityAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMultiplicityMultiplicityParserRuleCall_2_0 = (RuleCall)cMultiplicityAssignment_2.eContents().get(0);
		
		//Uses:
		//	"Uses: " name=ID multiplicity=Multiplicity?;
		@Override public ParserRule getRule() { return rule; }

		//"Uses: " name=ID multiplicity=Multiplicity?
		public Group getGroup() { return cGroup; }

		//"Uses: "
		public Keyword getUsesKeyword_0() { return cUsesKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//multiplicity=Multiplicity?
		public Assignment getMultiplicityAssignment_2() { return cMultiplicityAssignment_2; }

		//Multiplicity
		public RuleCall getMultiplicityMultiplicityParserRuleCall_2_0() { return cMultiplicityMultiplicityParserRuleCall_2_0; }
	}

	public class MultiplicityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Multiplicity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cNumberParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cStarParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cAlternatives_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_1_0_0 = (Keyword)cGroup_1_1_0.eContents().get(0);
		private final RuleCall cNumberParserRuleCall_1_1_0_1 = (RuleCall)cGroup_1_1_0.eContents().get(1);
		private final RuleCall cStarParserRuleCall_1_1_1 = (RuleCall)cAlternatives_1_1.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//Multiplicity:
		//	"{" Number | Star ("," Number | Star)? "}";
		@Override public ParserRule getRule() { return rule; }

		//"{" Number | Star ("," Number | Star)? "}"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"{" Number
		public Group getGroup_0() { return cGroup_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0_0() { return cLeftCurlyBracketKeyword_0_0; }

		//Number
		public RuleCall getNumberParserRuleCall_0_1() { return cNumberParserRuleCall_0_1; }

		//Star ("," Number | Star)? "}"
		public Group getGroup_1() { return cGroup_1; }

		//Star
		public RuleCall getStarParserRuleCall_1_0() { return cStarParserRuleCall_1_0; }

		//("," Number | Star)?
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//"," Number
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }

		//","
		public Keyword getCommaKeyword_1_1_0_0() { return cCommaKeyword_1_1_0_0; }

		//Number
		public RuleCall getNumberParserRuleCall_1_1_0_1() { return cNumberParserRuleCall_1_1_0_1; }

		//Star
		public RuleCall getStarParserRuleCall_1_1_1() { return cStarParserRuleCall_1_1_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
	}

	public class NumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Number");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cDigitZeroKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cDigitOneKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cDigitTwoKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cDigitThreeKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cDigitFourKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cDigitFiveKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cDigitSixKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cDigitSevenKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cDigitEightKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cDigitNineKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		
		//Number:
		//	("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")*;
		@Override public ParserRule getRule() { return rule; }

		//("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")*
		public Alternatives getAlternatives() { return cAlternatives; }

		//"0"
		public Keyword getDigitZeroKeyword_0() { return cDigitZeroKeyword_0; }

		//"1"
		public Keyword getDigitOneKeyword_1() { return cDigitOneKeyword_1; }

		//"2"
		public Keyword getDigitTwoKeyword_2() { return cDigitTwoKeyword_2; }

		//"3"
		public Keyword getDigitThreeKeyword_3() { return cDigitThreeKeyword_3; }

		//"4"
		public Keyword getDigitFourKeyword_4() { return cDigitFourKeyword_4; }

		//"5"
		public Keyword getDigitFiveKeyword_5() { return cDigitFiveKeyword_5; }

		//"6"
		public Keyword getDigitSixKeyword_6() { return cDigitSixKeyword_6; }

		//"7"
		public Keyword getDigitSevenKeyword_7() { return cDigitSevenKeyword_7; }

		//"8"
		public Keyword getDigitEightKeyword_8() { return cDigitEightKeyword_8; }

		//"9"
		public Keyword getDigitNineKeyword_9() { return cDigitNineKeyword_9; }
	}

	public class StarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Star");
		private final Keyword cAsteriskKeyword = (Keyword)rule.eContents().get(1);
		
		//Star:
		//	"*";
		@Override public ParserRule getRule() { return rule; }

		//"*"
		public Keyword getAsteriskKeyword() { return cAsteriskKeyword; }
	}
	
	
	private final UseCaseElements pUseCase;
	private final SubsystemElements pSubsystem;
	private final CaseElements pCase;
	private final ExtensionPointElements pExtensionPoint;
	private final IncludesElements pIncludes;
	private final ExtendsElements pExtends;
	private final ActorElements pActor;
	private final InheritanceElements pInheritance;
	private final UsesElements pUses;
	private final MultiplicityElements pMultiplicity;
	private final NumberElements pNumber;
	private final StarElements pStar;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public UseCaseGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pUseCase = new UseCaseElements();
		this.pSubsystem = new SubsystemElements();
		this.pCase = new CaseElements();
		this.pExtensionPoint = new ExtensionPointElements();
		this.pIncludes = new IncludesElements();
		this.pExtends = new ExtendsElements();
		this.pActor = new ActorElements();
		this.pInheritance = new InheritanceElements();
		this.pUses = new UsesElements();
		this.pMultiplicity = new MultiplicityElements();
		this.pNumber = new NumberElements();
		this.pStar = new StarElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.alma.djynx.usecase.UseCase".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//UseCase:
	//	systems+=Subsystem* actors+=Actor*;
	public UseCaseElements getUseCaseAccess() {
		return pUseCase;
	}
	
	public ParserRule getUseCaseRule() {
		return getUseCaseAccess().getRule();
	}

	//Subsystem:
	//	"Subsystem: " name=ID cases+=Case*;
	public SubsystemElements getSubsystemAccess() {
		return pSubsystem;
	}
	
	public ParserRule getSubsystemRule() {
		return getSubsystemAccess().getRule();
	}

	//Case:
	//	"Case: " name=ID extensions+=ExtensionPoint* includes+=Includes* extends+=Extends*;
	public CaseElements getCaseAccess() {
		return pCase;
	}
	
	public ParserRule getCaseRule() {
		return getCaseAccess().getRule();
	}

	//ExtensionPoint:
	//	"ExtensionPoint: " name=ID;
	public ExtensionPointElements getExtensionPointAccess() {
		return pExtensionPoint;
	}
	
	public ParserRule getExtensionPointRule() {
		return getExtensionPointAccess().getRule();
	}

	//Includes:
	//	"Includes: " name=ID "{" rules+=ID* "}";
	public IncludesElements getIncludesAccess() {
		return pIncludes;
	}
	
	public ParserRule getIncludesRule() {
		return getIncludesAccess().getRule();
	}

	//Extends:
	//	"Extends: " name=ID "{" rules+=ID* "}";
	public ExtendsElements getExtendsAccess() {
		return pExtends;
	}
	
	public ParserRule getExtendsRule() {
		return getExtendsAccess().getRule();
	}

	//Actor:
	//	"Actor: " name=ID inheritances+=Inheritance* uses+=Uses*;
	public ActorElements getActorAccess() {
		return pActor;
	}
	
	public ParserRule getActorRule() {
		return getActorAccess().getRule();
	}

	//Inheritance:
	//	"Extends: " name=ID;
	public InheritanceElements getInheritanceAccess() {
		return pInheritance;
	}
	
	public ParserRule getInheritanceRule() {
		return getInheritanceAccess().getRule();
	}

	//Uses:
	//	"Uses: " name=ID multiplicity=Multiplicity?;
	public UsesElements getUsesAccess() {
		return pUses;
	}
	
	public ParserRule getUsesRule() {
		return getUsesAccess().getRule();
	}

	//Multiplicity:
	//	"{" Number | Star ("," Number | Star)? "}";
	public MultiplicityElements getMultiplicityAccess() {
		return pMultiplicity;
	}
	
	public ParserRule getMultiplicityRule() {
		return getMultiplicityAccess().getRule();
	}

	//Number:
	//	("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")*;
	public NumberElements getNumberAccess() {
		return pNumber;
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	//Star:
	//	"*";
	public StarElements getStarAccess() {
		return pStar;
	}
	
	public ParserRule getStarRule() {
		return getStarAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
