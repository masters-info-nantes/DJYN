/*
 * generated by Xtext
 */
package com.alma.djynx.usecase.serializer;

import com.alma.djynx.usecase.services.UseCaseGrammarAccess;
import com.alma.djynx.usecase.useCase.Actor;
import com.alma.djynx.usecase.useCase.Case;
import com.alma.djynx.usecase.useCase.Extends;
import com.alma.djynx.usecase.useCase.ExtensionPoint;
import com.alma.djynx.usecase.useCase.Includes;
import com.alma.djynx.usecase.useCase.Inheritance;
import com.alma.djynx.usecase.useCase.Subsystem;
import com.alma.djynx.usecase.useCase.UseCase;
import com.alma.djynx.usecase.useCase.UseCasePackage;
import com.alma.djynx.usecase.useCase.Uses;
import com.google.inject.Inject;
import com.google.inject.Provider;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticNodeProvider.INodesForEObjectProvider;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class UseCaseSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private UseCaseGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == UseCasePackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case UseCasePackage.ACTOR:
				sequence_Actor(context, (Actor) semanticObject); 
				return; 
			case UseCasePackage.CASE:
				sequence_Case(context, (Case) semanticObject); 
				return; 
			case UseCasePackage.EXTENDS:
				sequence_Extends(context, (Extends) semanticObject); 
				return; 
			case UseCasePackage.EXTENSION_POINT:
				sequence_ExtensionPoint(context, (ExtensionPoint) semanticObject); 
				return; 
			case UseCasePackage.INCLUDES:
				sequence_Includes(context, (Includes) semanticObject); 
				return; 
			case UseCasePackage.INHERITANCE:
				sequence_Inheritance(context, (Inheritance) semanticObject); 
				return; 
			case UseCasePackage.SUBSYSTEM:
				sequence_Subsystem(context, (Subsystem) semanticObject); 
				return; 
			case UseCasePackage.USE_CASE:
				sequence_UseCase(context, (UseCase) semanticObject); 
				return; 
			case UseCasePackage.USES:
				sequence_Uses(context, (Uses) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     (name=ID inheritances+=Inheritance* uses+=Uses*)
	 */
	protected void sequence_Actor(EObject context, Actor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID extensions+=ExtensionPoint* includes+=Includes* extends+=Extends*)
	 */
	protected void sequence_Case(EObject context, Case semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID rules+=ID*)
	 */
	protected void sequence_Extends(EObject context, Extends semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_ExtensionPoint(EObject context, ExtensionPoint semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, UseCasePackage.Literals.EXTENSION_POINT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UseCasePackage.Literals.EXTENSION_POINT__NAME));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getExtensionPointAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID rules+=ID*)
	 */
	protected void sequence_Includes(EObject context, Includes semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Inheritance(EObject context, Inheritance semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, UseCasePackage.Literals.INHERITANCE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UseCasePackage.Literals.INHERITANCE__NAME));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getInheritanceAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID cases+=Case*)
	 */
	protected void sequence_Subsystem(EObject context, Subsystem semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (systems+=Subsystem* actors+=Actor*)
	 */
	protected void sequence_UseCase(EObject context, UseCase semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID multiplicity=Multiplicity?)
	 */
	protected void sequence_Uses(EObject context, Uses semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
}
