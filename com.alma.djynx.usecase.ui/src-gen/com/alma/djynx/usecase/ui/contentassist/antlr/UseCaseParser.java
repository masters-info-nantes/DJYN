/*
 * generated by Xtext
 */
package com.alma.djynx.usecase.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import com.alma.djynx.usecase.services.UseCaseGrammarAccess;

public class UseCaseParser extends AbstractContentAssistParser {
	
	@Inject
	private UseCaseGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected com.alma.djynx.usecase.ui.contentassist.antlr.internal.InternalUseCaseParser createParser() {
		com.alma.djynx.usecase.ui.contentassist.antlr.internal.InternalUseCaseParser result = new com.alma.djynx.usecase.ui.contentassist.antlr.internal.InternalUseCaseParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getMultiplicityAccess().getAlternatives(), "rule__Multiplicity__Alternatives");
					put(grammarAccess.getMultiplicityAccess().getAlternatives_1_1(), "rule__Multiplicity__Alternatives_1_1");
					put(grammarAccess.getNumberAccess().getAlternatives(), "rule__Number__Alternatives");
					put(grammarAccess.getUseCaseAccess().getGroup(), "rule__UseCase__Group__0");
					put(grammarAccess.getSubsystemAccess().getGroup(), "rule__Subsystem__Group__0");
					put(grammarAccess.getCaseAccess().getGroup(), "rule__Case__Group__0");
					put(grammarAccess.getExtensionPointAccess().getGroup(), "rule__ExtensionPoint__Group__0");
					put(grammarAccess.getIncludesAccess().getGroup(), "rule__Includes__Group__0");
					put(grammarAccess.getExtendsAccess().getGroup(), "rule__Extends__Group__0");
					put(grammarAccess.getActorAccess().getGroup(), "rule__Actor__Group__0");
					put(grammarAccess.getInheritanceAccess().getGroup(), "rule__Inheritance__Group__0");
					put(grammarAccess.getUsesAccess().getGroup(), "rule__Uses__Group__0");
					put(grammarAccess.getMultiplicityAccess().getGroup_0(), "rule__Multiplicity__Group_0__0");
					put(grammarAccess.getMultiplicityAccess().getGroup_1(), "rule__Multiplicity__Group_1__0");
					put(grammarAccess.getMultiplicityAccess().getGroup_1_1_0(), "rule__Multiplicity__Group_1_1_0__0");
					put(grammarAccess.getUseCaseAccess().getSystemsAssignment_0(), "rule__UseCase__SystemsAssignment_0");
					put(grammarAccess.getUseCaseAccess().getActorsAssignment_1(), "rule__UseCase__ActorsAssignment_1");
					put(grammarAccess.getSubsystemAccess().getNameAssignment_1(), "rule__Subsystem__NameAssignment_1");
					put(grammarAccess.getSubsystemAccess().getCasesAssignment_2(), "rule__Subsystem__CasesAssignment_2");
					put(grammarAccess.getCaseAccess().getNameAssignment_1(), "rule__Case__NameAssignment_1");
					put(grammarAccess.getCaseAccess().getExtensionsAssignment_2(), "rule__Case__ExtensionsAssignment_2");
					put(grammarAccess.getCaseAccess().getIncludesAssignment_3(), "rule__Case__IncludesAssignment_3");
					put(grammarAccess.getCaseAccess().getExtendsAssignment_4(), "rule__Case__ExtendsAssignment_4");
					put(grammarAccess.getExtensionPointAccess().getNameAssignment_1(), "rule__ExtensionPoint__NameAssignment_1");
					put(grammarAccess.getIncludesAccess().getNameAssignment_1(), "rule__Includes__NameAssignment_1");
					put(grammarAccess.getIncludesAccess().getRulesAssignment_3(), "rule__Includes__RulesAssignment_3");
					put(grammarAccess.getExtendsAccess().getNameAssignment_1(), "rule__Extends__NameAssignment_1");
					put(grammarAccess.getExtendsAccess().getRulesAssignment_3(), "rule__Extends__RulesAssignment_3");
					put(grammarAccess.getActorAccess().getNameAssignment_1(), "rule__Actor__NameAssignment_1");
					put(grammarAccess.getActorAccess().getInheritancesAssignment_2(), "rule__Actor__InheritancesAssignment_2");
					put(grammarAccess.getActorAccess().getUsesAssignment_3(), "rule__Actor__UsesAssignment_3");
					put(grammarAccess.getInheritanceAccess().getNameAssignment_1(), "rule__Inheritance__NameAssignment_1");
					put(grammarAccess.getUsesAccess().getNameAssignment_1(), "rule__Uses__NameAssignment_1");
					put(grammarAccess.getUsesAccess().getMultiplicityAssignment_2(), "rule__Uses__MultiplicityAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			com.alma.djynx.usecase.ui.contentassist.antlr.internal.InternalUseCaseParser typedParser = (com.alma.djynx.usecase.ui.contentassist.antlr.internal.InternalUseCaseParser) parser;
			typedParser.entryRuleUseCase();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public UseCaseGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(UseCaseGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
